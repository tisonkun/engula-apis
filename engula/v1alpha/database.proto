syntax = "proto3";

package engula.v1alpha;

message DatabaseRequest {
  string name = 1;
  repeated CollectionRequest selects = 2;
  repeated CollectionRequest mutates = 3;
}

message DatabaseResponse {
  repeated CollectionResponse selects = 1;
  repeated CollectionResponse mutates = 2;
}

message CollectionRequest {
  string name = 1;
  repeated bytes ids = 2;
  repeated TypedExpr exprs = 3;
}

message CollectionResponse { repeated TypedValue values = 1; }

// TODO:
// - Options: TTL
// - Range expressions
// - Conditional expressions

enum Function {
  // General
  GET = 0;
  SET = 1;
  DELETE = 2;
  EXISTS = 3;

  // Numeric
  ADD = 10;
  SUB = 11;

  // Sequence
  TRIM = 30;
  LPOP = 31;
  RPOP = 32;
  LPUSH = 33;
  RPUSH = 34;

  // Container
  LEN = 40;
  INDEX = 41;
  RANGE = 42;
  CLEAR = 43;
  EXTEND = 44;
  REMOVE = 45;
  CONTAINS = 46;
}

message AnyExpr { CallExpr call = 1; }

message I64Expr { CallExpr call = 1; }

message F64Expr { CallExpr call = 1; }

message BlobExpr { CallExpr call = 1; }

message TextExpr { CallExpr call = 1; }

message MapExpr { CallExpr call = 1; }

message SetExpr { CallExpr call = 1; }

message ListExpr { CallExpr call = 1; }

message CallExpr {
  Function func = 1;
  repeated TypedValue args = 2;
}

message TypedExpr {
  oneof expr {
    AnyExpr any_expr = 1;
    I64Expr i64_expr = 2;
    F64Expr f64_expr = 3;
    BlobExpr blob_expr = 4;
    TextExpr text_expr = 5;
    MapExpr map_expr = 8;
    SetExpr set_expr = 9;
    ListExpr list_expr = 10;
  }
}

message TypedValue {
  oneof value {
    sint64 i64_value = 1;
    double f64_value = 2;
    bytes blob_value = 3;
    string text_value = 4;
    MapValue map_value = 8;
    SetValue set_value = 9;
    ListValue list_value = 10;
    RangeValue range_value = 15;
  }
}

message MapValue {
  ListValue keys = 1;
  ListValue values = 2;
}

message SetValue { ListValue keys = 1; }

message ListValue {
  repeated sint64 i64_value = 1;
  repeated double f64_value = 2;
  repeated bytes blob_value = 3;
  repeated string text_value = 4;
}

enum RangeBound {
  INCLUDED = 0;
  EXCLUDED = 1;
  UNBOUNDED = 2;
}

message RangeValue {
  bytes start = 1;
  RangeBound start_bound = 2;
  bytes end = 3;
  RangeBound end_bound = 4;
}
